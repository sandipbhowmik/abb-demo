# ──────────────────────────────────────────────────────────────────────────────
# Builds the Spring Petclinic microservices from /src and pushes images to ACR
# with security checks (secret scan, SAST).
# ──────────────────────────────────────────────────────────────────────────────
name: ABB Demo Petclinic App Build using GHAS

on:
  push:
    branches: [ main, master ]
    paths:
      - ".github/workflows/abb-demoapp-build-and-push.yaml"
    tags: [ "v*" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  JAVA_VERSION: '17'
  MVN_ARGS: '-B -ntp -DskipTests'
  DOCKERFILE: src/docker/Dockerfile
  DOCKERIZE_VERSION: v0.6.1
  ACR_LOGIN_SERVER: abbdemoazdevacr.azurecr.io
  IMAGE_NAMESPACE: demo-petclinic-app
  PLATFORMS: linux/amd64,linux/arm64
  ACR_NAME: abbdemoazdevacr

# Static security checks

jobs:
  security_static:
    name: Static Security Check
    runs-on: self-hosted
    permissions:
      contents: read
      actions: read
      security-events: write   # required for CodeQL
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Secret scanning (gitleaks)
      - name: Secret scan (gitleaks)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: "--no-banner --redact --verbose --exit-code 1"
      
     # JDK 17 on the runner for Maven to use
      - name: Set up Temurin 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      # SAST (CodeQL) — Java
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      # Manual build for CodeQL
      - name: Build (manual for CodeQL on Java 17)
        working-directory: src
        run: |
          mvn -v
          mvn -B -ntp -DskipTests clean package

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

# Run Unit Test and Integration Test

  unit_and_it:
    name: "Unit & IT — ${{ matrix.name }}"
    runs-on: self-hosted
    permissions:
      id-token: write
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: config-server
            module: spring-petclinic-config-server
            port: 8888
          - name: api-gateway
            module: spring-petclinic-api-gateway
            port: 8081
          - name: customers-service
            module: spring-petclinic-customers-service
            port: 8082
          - name: vets-service
            module: spring-petclinic-vets-service
            port: 8083
          - name: visits-service
            module: spring-petclinic-visits-service
            port: 8084
          - name: chat-agent
            module: spring-petclinic-chat-agent
            port: 8085

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      
      - name: Unit tests — ${{ matrix.name }}
        shell: bash
        run: |
          set -e
          mvn -B -ntp -DskipITs test -f src/${{ matrix.module }}/pom.xml
      
      - name: Integration tests — ${{ matrix.name }}
        env:
          SERVER_PORT: ${{ matrix.port }}
        shell: bash
        run: |
          set -e
          mvn -B -ntp -DskipUnitTests verify -Pintegration-tests -f src/${{ matrix.module }}/pom.xml


# Build & Push — runs only if security jobs pass

  build:
    name: Build & Push Images (after security gates)
    needs: [security_static, unit_and_it]
    runs-on: self-hosted
    permissions:
      id-token: write
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: config-server
            module: spring-petclinic-config-server
            port: 8888
          - name: api-gateway
            module: spring-petclinic-api-gateway
            port: 8080
          - name: customers-service
            module: spring-petclinic-customers-service
            port: 8080
          - name: vets-service
            module: spring-petclinic-vets-service
            port: 8080
          - name: visits-service
            module: spring-petclinic-visits-service
            port: 8080
          - name: chat-agent
            module: spring-petclinic-chat-agent
            port: 8080

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Set up QEMU for multi-arch
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build jar for ${{ matrix.name }}
        shell: bash
        run: |
          set -e
          mvn -f src/${{ matrix.module }}/pom.xml $MVN_ARGS package

      - name: Prepare image context (copy jar to app.jar)
        shell: bash
        run: |
          set -e
          TARGET="src/${{ matrix.module }}/target"
          ls -l "$TARGET"
          JAR=$(ls "$TARGET"/*.jar | head -n1)
          cp -f "$JAR" "$TARGET/app.jar"

      - name: Validate required env
        run: |
          if [ -z "${{ env.ACR_LOGIN_SERVER }}" ]; then
            echo "ACR_LOGIN_SERVER is required (e.g., myregistry.azurecr.io)." >&2
            exit 1
          fi

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry (ACR)
        run: az acr login --name "$ACR_NAME"

      - name: Set image registry/repo
        id: img
        run: |
          echo "reg=${{ env.ACR_LOGIN_SERVER }}" >> $GITHUB_OUTPUT
          echo "ns=${IMAGE_NAMESPACE}" >> $GITHUB_OUTPUT

      - name: Build and push multi-platform image
        uses: docker/build-push-action@v6
        with:
          context: src/${{ matrix.module }}/target
          file: ${{ env.DOCKERFILE }}
          push: true
          platforms: ${{ env.PLATFORMS }}
          tags: |
            ${{ steps.img.outputs.reg }}/${{ steps.img.outputs.ns }}/${{ matrix.name }}:sha-${{ github.sha }}
            ${{ steps.img.outputs.reg }}/${{ steps.img.outputs.ns }}/${{ matrix.name }}:latest
          build-args: |
            ARTIFACT_NAME=app
            EXPOSED_PORT=${{ matrix.port }}
            DOCKERIZE_VERSION=${{ env.DOCKERIZE_VERSION }}